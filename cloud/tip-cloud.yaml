AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template for Tip Cloud
Parameters:
  s3Bucket:
    Type: String
    Description: Bucket where zip for lambdas resides

  s3Key:
    Type: String
    Description: Path to zip for lambdas

  certificateId:
    Type: String
    Description: SSL certificate

  domainName:
    Type: String
    Description: Domain name
Resources:
  # ****************************************************************************
  # API
  # ****************************************************************************
  Api:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Description: Tip Cloud API that provides status board by merge commit sha for paths specified by tip.yaml
      Name: TipCloud-PROD

  ApiBoardResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId
      PathPart: board
    DependsOn: Api

  ApiBoardMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      RestApiId: !Ref Api
      ResourceId: !Ref ApiBoardResource
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tipCreateBoardLambda.Arn}/invocations
    DependsOn:
      - Api
      - ApiBoardResource
      - tipCreateBoardLambda

  ApiBoardPathResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !Ref ApiBoardResource
      PathPart: path
    DependsOn:
      - Api
      - ApiBoardResource

  ApiBoardPathMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      RestApiId: !Ref Api
      ResourceId: !Ref ApiBoardPathResource
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tipVerifyPathLambda.Arn}/invocations
    DependsOn:
    - Api
    - ApiBoardPathResource
    - tipVerifyPathLambda

  ApiBoardShaResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !Ref ApiBoardResource
      PathPart: '{sha}'
    DependsOn:
    - Api
    - ApiBoardResource

  ApiBoardShaMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      RestApiId: !Ref Api
      ResourceId: !Ref ApiBoardShaResource
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        IntegrationResponses:
        - StatusCode: '200'
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tipGetBoardLambda.Arn}/invocations
      MethodResponses:
      - StatusCode: '200'
        ResponseModels: { 'text/html': 'Empty' }
    DependsOn:
    - Api
    - ApiBoardShaResource
    - tipGetBoardLambda

  ApiOwnerResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId
      PathPart: '{owner}'
    DependsOn: Api

  ApiRepoResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !Ref ApiOwnerResource
      PathPart: '{repo}'
    DependsOn:
    - Api
    - ApiOwnerResource

  ApiBoardsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !Ref ApiRepoResource
      PathPart: boards
    DependsOn:
    - Api
    - ApiOwnerResource
    - ApiRepoResource

  ApiHeadResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !Ref ApiBoardsResource
      PathPart: head
    DependsOn:
    - Api
    - ApiOwnerResource
    - ApiRepoResource
    - ApiBoardsResource

  ApiHeadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      RestApiId: !Ref Api
      ResourceId: !Ref ApiHeadResource
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        IntegrationResponses:
        - StatusCode: '200'
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tipGetHeadBoardLambda.Arn}/invocations
      MethodResponses:
      - StatusCode: '200'
        ResponseModels: { 'text/html': 'Empty' }
    DependsOn:
    - Api
    - ApiOwnerResource
    - ApiRepoResource
    - ApiBoardsResource
    - ApiHeadResource
    - tipGetHeadBoardLambda

  ApiHeadPathsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !Ref ApiHeadResource
      PathPart: paths
    DependsOn:
    - Api
    - ApiOwnerResource
    - ApiRepoResource
    - ApiBoardsResource
    - ApiHeadResource

  ApiHeadPathsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      RestApiId: !Ref Api
      ResourceId: !Ref ApiHeadPathsResource
      HttpMethod: PATCH
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        IntegrationResponses:
        - StatusCode: '200'
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tipVerifyHeadPathLambda.Arn}/invocations
      MethodResponses:
      - StatusCode: '200'
        ResponseModels: { 'text/html': 'Empty' }
    DependsOn:
    - Api
    - ApiOwnerResource
    - ApiRepoResource
    - ApiBoardsResource
    - ApiHeadResource
    - ApiHeadPathsResource
    - tipVerifyHeadPathLambda

  AllowApiGatewayToInvokeCreateBoardLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:tip-create-board
    DependsOn:
    - tipCreateBoardLambda
    - ApiBoardMethod

  AllowApiGatewayToInvokeVerifyPathLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:tip-verify-path
    DependsOn:
    - tipVerifyPathLambda
    - ApiBoardPathMethod

  AllowApiGatewayToInvokeVerifyHeadPathLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:tip-verify-head-path
    DependsOn:
    - tipVerifyHeadPathLambda
    - ApiHeadPathsMethod

  AllowApiGatewayToInvokeGetBoardLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:tip-get-board
    DependsOn:
    - tipGetBoardLambda
    - ApiBoardShaMethod

  AllowApiGatewayToInvokeGetHeadBoardLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:tip-get-head-board
    DependsOn:
    - tipGetHeadBoardLambda
    - ApiHeadMethod

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref Api
      Description: Production deployment environment stage
      StageName: PROD
    DependsOn:
    - Api
    - ApiBoardShaMethod
    - ApiBoardPathMethod
    - ApiBoardMethod
    - AllowApiGatewayToInvokeCreateBoardLambdaPermission
    - AllowApiGatewayToInvokeVerifyPathLambdaPermission
    - AllowApiGatewayToInvokeGetBoardLambdaPermission
    - AllowApiGatewayToInvokeGetHeadBoardLambdaPermission
    - AllowApiGatewayToInvokeVerifyHeadPathLambdaPermission

  TipLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: Tip-Lambda-Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - '*'
          - Effect: Allow
            Action:
            - dynamodb:*
            Resource:
            - !GetAtt tipCloudDynamoDBTable.Arn

  TipDomainName:
    Type: "AWS::ApiGateway::DomainName"
    Properties:
      RegionalCertificateArn: !Sub arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${certificateId}
      DomainName: !Ref domainName
      EndpointConfiguration:
        Types:
        - REGIONAL

  TipPathMapping:
    Type: "AWS::ApiGateway::BasePathMapping"
    Properties:
      RestApiId: !Ref Api
      DomainName: !Ref TipDomainName
      Stage: PROD
    DependsOn:
    - Api
    - TipDomainName
    - ApiDeployment

  # ****************************************************************************
  # Lambdas
  # ****************************************************************************
  tipCreateBoardLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: tip-create-board
      Description: Create board
      Handler: "tip-create-board.handler"
      Role: !GetAtt TipLambdaRole.Arn
      Code:
        S3Bucket: !Ref s3Bucket
        S3Key: !Ref s3Key
      Runtime: nodejs8.10
      MemorySize: "128"
      Timeout: "10"

  tipGetBoardLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: tip-get-board
      Description: Get board
      Handler: "tip-get-board.handler"
      Role: !GetAtt TipLambdaRole.Arn
      Code:
        S3Bucket: !Ref s3Bucket
        S3Key: !Ref s3Key
      Runtime: nodejs8.10
      MemorySize: "128"
      Timeout: "10"

  tipGetHeadBoardLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: tip-get-head-board
      Description: Get repo's latest board
      Handler: "tip-get-head-board.handler"
      Role: !GetAtt TipLambdaRole.Arn
      Code:
        S3Bucket: !Ref s3Bucket
        S3Key: !Ref s3Key
      Runtime: nodejs8.10
      MemorySize: "128"
      Timeout: "10"

  tipVerifyPathLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: tip-verify-path
      Description: Verify path
      Handler: "tip-verify-path.handler"
      Role: !GetAtt TipLambdaRole.Arn
      Code:
        S3Bucket: !Ref s3Bucket
        S3Key: !Ref s3Key
      Runtime: nodejs8.10
      MemorySize: "128"
      Timeout: "10"

  tipVerifyHeadPathLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: tip-verify-head-path
      Description: Verify path on head (latest) board
      Handler: "tip-verify-head-path.handler"
      Role: !GetAtt TipLambdaRole.Arn
      Code:
        S3Bucket: !Ref s3Bucket
        S3Key: !Ref s3Key
      Runtime: nodejs8.10
      MemorySize: "128"
      Timeout: "10"

  # ****************************************************************************
  # Database
  # ****************************************************************************
  tipCloudDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      -
        AttributeName: "sha"
        AttributeType: "S"
      KeySchema:
      -
        AttributeName: "sha"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: "TipCloud-PROD"